@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS

<section class="py-5 newsletter-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <div class="newsletter-content">
                    <h2 class="newsletter-title mb-4">¡No te pierdas nuestras ofertas!</h2>
                    <p class="newsletter-subtitle lead mb-4">Suscríbete a nuestro boletín y recibe descuentos exclusivos en tu correo.</p>
                    
                    @if (isSubscribed)
                    {
                        <div class="alert alert-success newsletter-alert" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            ¡Gracias por suscribirte! Pronto recibirás nuestras mejores ofertas.
                        </div>
                    }
                    else if (showError)
                    {
                        <div class="alert alert-danger newsletter-alert" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                        </div>
                    }
                    
                    <div class="row justify-content-center">
                        <div class="col-md-10 col-lg-8">
                            <EditForm Model="newsletterModel" OnValidSubmit="HandleSubmit" class="newsletter-form">
                                <DataAnnotationsValidator />
                                
                                <div class="newsletter-input-group mb-3">
                                    <InputText @bind-Value="newsletterModel.Email" 
                                             class="form-control newsletter-input" 
                                             placeholder="Tu correo electrónico"
                                             disabled="@isLoading" />
                                    <button class="btn btn-primary newsletter-btn" 
                                            type="submit" 
                                            disabled="@(isLoading || !newsletterModel.AcceptTerms)">
                                        @if (isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-envelope-plus me-2"></i>
                                        }
                                        <span class="newsletter-btn-text">Suscribirse</span>
                                    </button>
                                </div>
                                
                                <ValidationMessage For="@(() => newsletterModel.Email)" class="text-danger small mb-3" />
                                
                                <div class="form-check newsletter-checkbox">
                                    <InputCheckbox @bind-Value="newsletterModel.AcceptTerms" 
                                                 class="form-check-input" 
                                                 id="newsletterCheck" />
                                    <label class="form-check-label newsletter-checkbox-label" for="newsletterCheck">
                                Acepto recibir comunicaciones de marketing de TecnoPartes.
                            </label>
                                </div>
                                <ValidationMessage For="@(() => newsletterModel.AcceptTerms)" class="text-danger small" />
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section> 

@code {
    private NewsletterModel newsletterModel = new();
    private bool isLoading = false;
    private bool isSubscribed = false;
    private bool showError = false;
    private string errorMessage = "";

    public class NewsletterModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "Ingresa un correo electrónico válido")]
        public string Email { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "Debes aceptar recibir comunicaciones")]
        public bool AcceptTerms { get; set; } = false;
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        showError = false;
        StateHasChanged();

        try
        {
            await Task.Delay(1500);

            if (newsletterModel.Email.Contains("test@error.com"))
            {
                throw new Exception("Error de conexión. Intenta nuevamente.");
            }

            isSubscribed = true;
            newsletterModel = new NewsletterModel();
            
            await JS.InvokeVoidAsync("console.log", $"Newsletter subscription: {newsletterModel.Email}");
        }
        catch (Exception ex)
        {
            showError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
} 